{ ******* Debugging ******** }

function debug_PlayMode(i)
    debug("---------")
end function

function debug_Playing        
    // debug_clear()
    for i := 0 to Globals.maxVoices-1
        if (Playing[i].sys # -1)
            debug("([" & i & "] n" & Playing[i].note.note &"v"& Playing[i].note.velocity &"), " & "sys(" & Playing[i].sys & ", still("& Playing[i].playmode.still &"), zl("& Playing[i].zone.length &"), " & "active(" & Playing[i].active & "), " & "parent(" & Playing[i].parent & "), V(" & Playing[i].playMode.lh_Vibrato & "), si("& Playing[i].playMode.slideIn &"), so("& Playing[i].playMode.slideOut &"), su("& Playing[i].playMode.slideUp &","&Playing[i].playMode.slideUp2&"), sd("& Playing[i].playMode.slideDown &","&Playing[i].playMode.slideDown2&"), off("&Playing[i].playmode.offset&"), stn(" & Playing[i].playmode.afterNoteNoise & "), ghost(" & Playing[i].ghost & "), pm.duration(" & Playing[i].playmode.duration & ")")
            debug("")            
        end if
    end for

    debug("---------")  
end function

function debug_Groups
    declare i
    for i := 0 to Globals.maxGroups-1
        debug2("i(" & activeGroups[i] & ") = " & group_name(activeGroups[i]))
    end for
end function
function debug_GroupNames
    for i := 0 to Globals.maxGroups-1
        debug(group_name(activeGroups[i]))
    end for
end function

function debug_affectedGroups
    for i := 0 to num_elements(%GROUPS_AFFECTED)-1
        debug(group_name(%GROUPS_AFFECTED[i]))
    end for
end function

function debug(s)
    if (UI.debugClear = 1)
        add_text_line(UI.label, s)
    end if
end function

function debug2(s)
    if (UI.debugClear = 1)
        add_text_line(UI.label2, s)
    end if
end function

function debug_clear
    set_text(UI.label, "")
end function

function debug2_clear
    set_text(UI.label2, "")
end function

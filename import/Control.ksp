on ui_control (UI.slide)
    extControl(ExtEventType.slide, UI.slide)
end on

on ui_control (UI.vibratoSpeed)
    extControl(ExtEventType.vibratoSpeed, UI.vibratoSpeed)
end on

on ui_control (UI.vibratoDepth)
    extControl(ExtEventType.vibratoDepth, UI.vibratoDepth)
end on

on ui_control (UI.debugClear)
    debug_clear()
    debug2_clear()
end on

function extControl(etype, value)
// TODO : check if previous value of a control equals the new one then do nothing. Optimizing.
    declare ev
    declare i

    select etype

        case ExtEventType.slide
            playModeGlobal.slide := value
            if (value = 0)
                Globals.slideStarted := 0
            else 
                Globals.slideStarted := 1
            end if

        case ExtEventType.vibratoSpeed
            playModeGlobal.vibratoSpeed := value

        case ExtEventType.vibratoDepth

            if (playModeGlobal.vibratoDepth # value)

                for i := 0 to Globals.maxVoices-1
                    if (Playing[i].sys # -1 and Playing[i].playMode.lh_Vibrato = 1)
                        declare ev
                        ev := getEngineLHVibratoSpeed(value)
                        set_engine_par($ENGINE_PAR_SPEED, ev, Playing[i].groupIndex, -1, -1)                    
                    end if
                end for

                if (playModeGlobal.vibratoDepth = 0 and value > 0)

                    if (playModeGlobal.vibratoNatural = 1)
                        Playing_vibratoTrigger(1)
                    end if

                    // starting vibrato cycle
                    for i := 0 to Globals.maxVoices-1
                        if (Playing[i].sys # -1 and Playing[i].playmode.lh_Vibrato = 0)
                            Playing_startVibratoCycle(i)
                        end if
                    end for
                else if (playModeGlobal.vibratoDepth > 0 and value = 0)
                    if (playModeGlobal.vibratoNatural = 1)
                        Playing_vibratoTrigger(0)
                    end if

                    // ending vibrato cycle
                    for i := 0 to Globals.maxVoices-1
                        if (Playing[i].sys # -1 and Playing[i].timeOp.vibrato # -1)
                            Playing[i].timeOp.vibrato := -1
                            Playing_changeTune(i, 0, 0, TuneTypes.vibrato)
                        end if
                    end for                
                end if

                playModeGlobal.vibratoDepth := value
            end if

{         case ExtEventType.pitchBend
            Globals.pitchBend := Funcs.getPitchBend(value)
            Globals.pitchBendRaw := value
            for i := 0 to Globals.maxVoices-1
                if (Playing[i].sys # -1)
                    Playing_changeTune(i, Globals.pitchBend, 0, TuneTypes.bend)
                end if
            end for
 }

{        case ExtEventType.vibratoSpeed

            declare group_index

            for i := 1 to Globals.takeCounts[ArtsCodes.v1]
                group_index := find_group("v1_t" & i)
                ev := Math.epSpeed(Math.V2E, (value + 100) * 10)
                set_engine_par($ENGINE_PAR_SPEED, ev, group_index, -1, -1)
            end for
}
    end select

    uiFeedback(etype, value)
end function

function uiFeedback(etype, value)
    declare i
    if (etype = ExtEventType.vibratoSpeed)
        UI.vibratoSpeed := value
    else if (etype = ExtEventType.vibratoDepth)
        UI.vibratoDepth := value
    else if (etype = ExtEventType.slide)
        UI.slide := value
    end if
end function

on controller
    onController()
end on

function onController
    declare v
    select ($CC_NUM)

        { Vibrato Speed }
        case 24
            extControl(ExtEventType.vibratoSpeed, %CC[$CC_NUM])

        { Vibrato Depth }
        case 1
            extControl(ExtEventType.vibratoDepth, %CC[$CC_NUM])

        { Slide [ In / Out / Up / Down ] Speed }
        case 26
            extControl(ExtEventType.slide, %CC[$CC_NUM])

        { pitch bend }
        case 128
            extControl(ExtEventType.pitchBend, %CC[$CC_NUM])

    end select

end function

on listener
    select $NI_SIGNAL_TYPE
        case $NI_SIGNAL_TRANSP_STOP
            Playing_stopAllNotes()
            playModeGlobal.lastNoteStart := -1
            Globals.slideStarted := 0
            extControl(ExtEventType.pitchBend, 0)
            extControl(ExtEventType.vibratoDepth, 0)
            extControl(ExtEventType.vibratoSpeed, VIBRATO_SPEED_DEFAULT)
            mGuitarNote_reset(lastNote)
            mGuitarNote_reset(nextNote)

        case $NI_SIGNAL_TRANSP_START

        case $NI_SIGNAL_TIMER_MS
            // happens every 1ms
            timeOperations()
            // altStroke()

    end select
end on

function timeOperations()
    declare i
    declare now := Funcs.Time_getCurrentTime() // ms

    // debug_Playing()

    // Events

    for i := 0 to Globals.maxEvents-1

        if (Event[i].type # -1 and now - Event[i].createTime > Event[i].fireDelay)

            select (Event[i].type)

                case EventType.afterNoteNoise
                    declare j
                    j := Event[i].value

                    if (Playing[j].sys # -1 and Playing[j].playmode.afterNoteNoise = 1)
                        declare vol            
                        vol := getGhostNoiseVolume(UI.ghostNoise)
                        change_vol(Playing[j].sys, vol, 0)
                    end if

            end select

            Event_resetItem(i)
        end if

    end for


    for i := 0 to Globals.maxVoices-1

        if (Playing[i].sys # -1)
            declare length
            declare zlen

            if (Playing[i].ghost = 1)
                zlen := Playing_transformZoneLength(i)
                if (now - Playing[i].startTime >= zlen)
                    Playing_stopNote(i)
                end if
            end if

            if (Playing[i].playMode.slideIn > 0 and Playing[i].active = 1)
                length := Playing_transformZoneLength(i)
                if (now - Playing[i].startTime >= length)
                    note_off(Playing[i].sys)
                end if
            end if

            if ((Playing[i].playMode.slideUp # 0 or Playing[i].playMode.slideDown # 0 or Playing[i].playMode.slideUp2 # 0 or Playing[i].playMode.slideDown2 # 0) and Playing[i].active = 1)
                zlen := Playing[i].zone.length / 1000
                declare pos
                if (zlen = 0) 
                    zlen := 400
                end if
                pos := get_event_par(Playing[i].sys, $EVENT_PAR_PLAY_POS) / 1000

                if ({ now - Playing[i].startTime >= length or  }pos > zlen-50)
                    note_off(Playing[i].sys)
                end if
            end if

{
            if (Playing[i].timeOp.fadeIn # -1 and Playing[i].active = 1)

                if (now - (Playing[i].startTime + Playing[i].timeOp.fadeIn) >= timeOperationPeriods.fadeIn)

                    declare offset
                    offset := Funcs.Time_linear(timeOperationValues.fadeIn_start, timeOperationValues.fadeIn_end, timeOperationTotals.fadeIn) * timeOperationPeriods.fadeIn
                    if (Playing[i].timeOp.fadeIn >= timeOperationTotals.fadeIn)
                        change_vol(Playing[i].sys, timeOperationValues.fadeIn_end, 0) // increasing by 1db
                        Playing[i].timeOp.fadeIn := -1
                    else 
                        change_vol(Playing[i].sys, offset, 1) // increasing by 1db
                        Playing[i].timeOp.fadeIn := Playing[i].timeOp.fadeIn + timeOperationPeriods.fadeIn
                    end if

                end if

            end if
}

            Globals.vibratoTune := 0
            if (Playing[i].timeOp.vibrato # -1)
                if (now - (Playing[i].startTime + Playing[i].timeOp.vibrato) >= timeOperationPeriods.vibrato)

                    declare val
                    declare speed := playModeGlobal.vibratoSpeed

                    if (speed = 0)
                        val := 0
                    else 
                        declare alpha := Playing[i].timeOp.vibrato * (9000 / (101 - speed)) // 9000 because of degree type; 500
                        declare a := (timeOperationValues.vibratoDepthMax / 100) * playModeGlobal.vibratoDepth
                        val := Sin(alpha)
                        val := val * (a / 10000) // sin returns from -10^4 to 10^4
                    end if                    

                    Globals.vibratoTune := val

                    Playing_changeTune(i, val, 0, TuneTypes.vibrato)
                    Playing[i].timeOp.vibrato := Playing[i].timeOp.vibrato + timeOperationPeriods.vibrato

                end if
            end if

        end if

    end for    
end function

import "import/Const.ksp"// import "import/Array.ksp"import "import/Event.ksp"import "import/PlayMode.ksp"import "import/Playing.ksp"import "import/UI.ksp"import "import/Control.ksp"import "import/Groups.ksp"// import "import/Board.ksp"import "import/debug.ksp"// import "import/PitchTable.ksp"import "import/Functions.ksp" as Funcsimport "import/KSPMathV702.ksp"on init    {#pragma save_compiled_source fbk-s1.txt}    Const_on_init()    Event_on_init()    message("")    set_script_title("S1")	make_perfview	set_ui_height_px(300)    { *********** LOCAL VARS ********** }	{ ********* DECLARE VARIABLES ********** }    declare @MSG_MAX_VOICE_REACHED := "Max voices reached"    declare const VOLUME_NONE := -100000    declare const VOLUME_MIN := -66000    declare const VOLUME_DEFAULT := 0    declare const VOLUME_MAX := 0    declare const VIBRATO_SPEED_DEFAULT := 55    family timeOperationPeriods        declare fadeIn := 1 // ms        declare vibrato := 1     end family    family timeOperationTotals        declare fadeIn := 30 // ms        declare vibrato := 0     end family    family timeOperationValues        declare fadeIn_start        declare fadeIn_end        declare vibratoDepthMax := 1 * 100000 // 1 halftones in millicents    end family    timeOperationValues.fadeIn_start := VOLUME_MIN    timeOperationValues.fadeIn_end := VOLUME_DEFAULT    PlayMode_on_init()    declare activeGroups[Globals.maxGroups]    const ExtEventType        slide        vibratoSpeed        vibratoDepth        pitchBend    end const    UI_on_init()    // Board_on_init()    	{ ********* DECLARE UI *************** }    Playing_on_init()    { ************ MISC INIT ************ }    set_listener($NI_SIGNAL_TRANSP_STOP,1)    set_listener($NI_SIGNAL_TIMER_MS, 1000) // micro seconds    SetMathMode(ALL, CD)end onon note    // message("")    onNote()end onon release     // message("")    onRelease()end onfunction onNote()    ignore_event($EVENT_ID)    setPlayMode($EVENT_NOTE, $EVENT_VELOCITY)    // creating new note    i := Playing_push(-1, $EVENT_NOTE, $EVENT_VELOCITY, 1)    if (i # -1)        playModeGlobal.lastNoteStart := Playing[i].startTime        PlayMode_copy(Playing[i].playMode, playMode)                Playing_playNote(i)        declare ai        ai := Playing_getActiveIndex(i)        change_vol(Playing[ai].sys, VOLUME_DEFAULT, 0)    end if    debug_Playing()end functionfunction onReleaseend functionmacro mGuitarNote_reset(#gn#)    #gn#.note := 0    #gn#.velocity := 0end macromacro mGuitarNote_copy(#d#, #s#)    #d#.note := #s#.note    #d#.velocity := #s#.nelocityend macro